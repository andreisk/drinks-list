plotdat = apply(plotdat[which(plotdat[,1]==1),],2,mean)[-1]
plotdat = melt(plotdat)
ggplot(plotdat,aes(x=rownames(plotdat), y=value)) +
geom_col() +
labs(x='Predictor',y='Normalized Value, Relative to Center')
}
sil_comp = silhouette(cutree(crab_comp$dis, k=3), dis)
g1 = dif(sil_comp[,1],1)
g2 = dif(sil_comp[,1],2)
g3 = dif(sil_comp[,1],3)
grid.arrange(g1,g2,g3,ncol=3)
#sil_ward = silhouette(cutree(crab_ward$dis, k=3), dis)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#grid.arrange(g1,g2,g3,ncol=3)
kable(get_sil(dis2,3), col.names = c('Mean Silhouette Width, Single', 'Mean Silhouette Width, Complete', 'Mean Silhouette Width, Ward'))
#sil_sing = silhouette(cutree(crab_sing$dis2, k=3), dis2)
#crabnorm[which(sil_sing[,1] != 1),]
#sil_comp = silhouette(cutree(crab_comp$dis2, k=3), dis2)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#grid.arrange(g1,g2,g3,ncol=3)
#sil_ward = silhouette(cutree(crab_ward$dis, k=3), dis)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#grid.arrange(g1,g2,g3,ncol=3)
kable(get_sil(dis3,3), col.names = c('Mean Silhouette Width, Single', 'Mean Silhouette Width, Complete', 'Mean Silhouette Width, Ward'))
#sil_comp = silhouette(cutree(crab_comp$dis3, k=3), dis3)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#grid.arrange(g1,g2,g3,ncol=3)
kable(get_sil(dis,5), col.names = c('Mean Silhouette Width, Single', 'Mean Silhouette Width, Complete', 'Mean Silhouette Width, Ward'))
kable(get_sil(dis2,5), col.names = c('Mean Silhouette Width, Single', 'Mean Silhouette Width, Complete', 'Mean Silhouette Width, Ward'))
kable(get_sil(dis3,5), col.names = c('Mean Silhouette Width, Single', 'Mean Silhouette Width, Complete', 'Mean Silhouette Width, Ward'))
#sil_comp = silhouette(cutree(crab_comp$dis, k=5), dis)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#g4 = dif(sil_comp[,1],4)
#g5 = dif(sil_comp[,1],5)
#grid.arrange(g1,g2,g3,g4,g5,ncol=3)
#sil_comp = silhouette(cutree(crab_comp$dis2, k=5), dis2)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#g4 = dif(sil_comp[,1],4)
#g5 = dif(sil_comp[,1],5)
#grid.arrange(g1,g2,g3,g4,g5,ncol=3)
#sil_comp = silhouette(cutree(crab_comp$dis3, k=5), dis3)
#g1 = dif(sil_comp[,1],1)
#g2 = dif(sil_comp[,1],2)
#g3 = dif(sil_comp[,1],3)
#g4 = dif(sil_comp[,1],4)
#g5 = dif(sil_comp[,1],5)
#grid.arrange(g1,g2,g3,g4,g5,ncol=3)
library(data.table)
get_sil2 = function(k){
sil_sing = silhouette(cutree(crab_sing$dis, k=k), dis)
sil_comp = silhouette(cutree(crab_comp$dis, k=k), dis)
sil_ward = silhouette(cutree(crab_ward$dis, k=k), dis)
sil_sing2 = silhouette(cutree(crab_sing$dis2, k=k), dis2)
sil_comp2 = silhouette(cutree(crab_comp$dis2, k=k), dis2)
sil_ward2 = silhouette(cutree(crab_ward$dis2, k=k), dis2)
sil_sing3 = silhouette(cutree(crab_sing$dis3, k=k), dis3)
sil_comp3 = silhouette(cutree(crab_comp$dis3, k=k), dis3)
sil_ward3 = silhouette(cutree(crab_ward$dis3, k=k), dis3)
return(data.frame(mean_sing1 = mean(sil_sing[,3]), mean_comp1 = mean(sil_comp[,3]), mean_ward1 = mean(sil_ward[,3]),mean_sing2 = mean(sil_sing2[,3]), mean_comp2 = mean(sil_comp2[,3]), mean_ward2 = mean(sil_ward2[,3]),mean_sing3 = mean(sil_sing3[,3]), mean_comp3 = mean(sil_comp3[,3]), mean_ward3 = mean(sil_ward3[,3])))
}
plotdat = cbind(2:10,t(mapply(get_sil2,2:10)))
plotdat = data.table(plotdat)
colnames(plotdat) = c('k','euc_sing','euc_comp','euc_ward','man_sing','man_comp','man_ward','gow_sing','gow_comp','gow_ward')
plotdat = melt(plotdat, id.vars = 'k')
plotdat = data.frame(plotdat)
ggplot(plotdat, aes(x=unlist(k),y=unlist(value), col = variable)) +
geom_line() +
labs(x='k',y='Mean Silhouette Width', col = 'Distance, Dissimilarity')
km = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
set.seed(456)
clust_kmeans2 = kmeans(crab5, k)
set.seed(789)
clust_kmeans3 = kmeans(crab5, k)
mds_temp = cbind(
mds, as.factor(clust_kmeans$cluster),
as.factor(clust_kmeans2$cluster),
as.factor(clust_kmeans3$cluster))
names(mds_temp) = c('V1', 'V2', 'clust1', 'clust2', 'clust3')
gp1 = ggplot(mds_temp, aes(x=V2, y=V1, color=clust1)) +
geom_point() + theme(legend.position="none")
gp2 = ggplot(mds_temp, aes(x=V2, y=V1, color=clust2)) +
geom_point() + theme(legend.position="none")
gp3 = ggplot(mds_temp, aes(x=V2, y=V1, color=clust3)) +
geom_point() + theme(legend.position="none")
grid.arrange(gp1, gp2, gp3, ncol=3)
out = data.frame(
withinss1 = clust_kmeans$tot.withinss,
withinss2 = clust_kmeans2$tot.withinss,
withinss3 = clust_kmeans3$tot.withinss,
betweenss1 = clust_kmeans$betweenss,
betweenss2 =clust_kmeans2$betweenss,
betweenss3 = clust_kmeans3$betweenss
)
return(out)
}
kable(km(3))
set.seed(123)
clust_kmeans = kmeans(crab5, 3)
ksil = silhouette(clust_kmeans$cluster,dis)
kable(mean(ksil[,3]), caption = 'Mean Silhouette Width')
g1 = dif(ksil[,1],1)
g2 = dif(ksil[,1],2)
g3 = dif(ksil[,1],3)
grid.arrange(g1,g2,g3,ncol=3)
?kable
kable(mean(ksil[,3]), col.names =  = 'Mean Silhouette Width')
kable(mean(ksil[,3]), col.names = 'Mean Silhouette Width')
kable(km(5))
kable(mean(ksil[,3]), caption = 'Mean Silhouette Width')
clust_kmeans = kmeans(crab5, 5)
ksil = silhouette(clust_kmeans$cluster,dis)
kable(mean(ksil[,3]), caption = 'Mean Silhouette Width')
g1 = dif(ksil[,1],1)
g2 = dif(ksil[,1],2)
g3 = dif(ksil[,1],3)
g4 = dif(ksil[,1],4)
g4 = dif(ksil[,1],5)
grid.arrange(g1,g2,g3,g4,g5,ncol=3)
km2 = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
out = data.frame(
withinss1 = clust_kmeans$tot.withinss,
betweenss1 = clust_kmeans$betweenss,
sil = silhouette(clust_kmeans$cluster,dis)[,3]
)
return(out)
}
sapply(2:10,km2)
plotdat = sapply(2:10,km2)
km2 = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
out = data.frame(
k
withinss1 = clust_kmeans$tot.withinss,
km2 = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
out = data.frame(
k,
withinss1 = clust_kmeans$tot.withinss,
betweenss1 = clust_kmeans$betweenss,
sil = silhouette(clust_kmeans$cluster,dis)[,3]
)
return(out)
}
plotdat = sapply(2:10,km2)
melt(plotdat,id.vars=k)
plotdat
plotdat = t(sapply(2:10,km2))
plotdat
km2 = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
out = data.frame(k,
withinss = clust_kmeans$tot.withinss,
betweenss = clust_kmeans$betweenss,
sil = silhouette(clust_kmeans$cluster,dis)[,3])
return(out)
}
plotdat = t(sapply(2:10,km2))
plotdat
data.frame(plotdat)
clust_kmeans = kmeans(crab5, 2)
out = data.frame(k,
withinss = clust_kmeans$tot.withinss,
betweenss = clust_kmeans$betweenss,
sil = silhouette(clust_kmeans$cluster,dis)[,3])
clust_kmeans$tot.withinss
km2 = function(k){
set.seed(123)
clust_kmeans = kmeans(crab5, k)
out = data.frame(k,
withinss = clust_kmeans$tot.withinss,
betweenss = clust_kmeans$betweenss,
sil = mean(silhouette(clust_kmeans$cluster,dis)[,3]))
return(out)
}
plotdat = t(sapply(2:10,km2))
plotdat
melt(plotdat,id.vars=k)
melt(plotdat[,-4],id.vars=k)
plotdat = data.frame(t(sapply(2:10,km2)))
melt(plotdat[,-4],id.vars=k)
melt(plotdat,id.vars=k)
plotdat
melt(plotdat,id.vars='k')
plotdat = data.table(t(sapply(2:10,km2)))
melt(plotdat,id.vars='k')
plotdat1 = melt(plotdat[,-4],id.vars='k')
head(plotdat)
ggplot(plotdat, aes(x=k,y=sil)) + geom_line() + labs(y='Silhouette Width')
ggplot(plotdat, aes(x=unlist(k),y=unlist(sil))) + geom_line() + labs(y='Silhouette Width')
ggplot(plotdat, aes(x=unlist(k),y=unlist(sil))) + geom_line() + labs(x='k',y='Silhouette Width')
ggplot(plotdat1, aes(x=unlist(k),y=unlist(value), col = unlist(variable))) + geom_line() + labs(x='k',y='Sum of Squares', col = 'SS Type')
library(mclust)
crab.clust = Mclust(crab5)
plot(crab.clust, what = 'BIC')
crab.clust #VEE with k=4 appears optimal
plot(crab.clust, what = 'BIC')
dif(crab.clust$classification)
dif(crab.clust$classification,1)
crab.clust$classification
g1 = dif(crab.clust$classification,1)
g2 = dif(crab.clust$classification,2)
g3 = dif(crab.clust$classification,3)
g4 = dif(crab.clust$classification,4)
grid.arrange(g1,g2,g3,g4,ncol=2)
sil_sing = silhouette(cutree(crab_sing$dis, k=4), dis)
sil_ward = silhouette(cutree(crab_ward$dis, k=4), dis)
q1 = ggplot(mds, aes(x=V2, y=V1, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
crabs$Sex
crabs$Sex = factor(crabs$Sex)
q1 = ggplot(mds, aes(x=V2, y=V1, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
crabs$Sex = factor(crabs$Sex)
crabs$Species = factor(crabs$Species)
q1 = ggplot(mds, aes(x=V2, y=V1, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = crabs$Species, shape = crabs$Sex)) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
sil_sing = silhouette(cutree(crab_sing$dis, k=4), dis)
sil_comp = silhouette(cutree(crab_comp$dis, k=4), dis)
sil_ward = silhouette(cutree(crab_ward$dis, k=4), dis)
q1 = ggplot(mds, aes(x=V2, y=V1, col = sil_sing[,1])) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = sil_sing[,1])) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = sil_sing[,1])) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = sil_sing[,1])) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(sil_sing[,1]))) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(sil_sing[,1]))) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(sil_sing[,1]))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(sil_sing[,1]))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
fviz_silhouette(sil_sing[,1])
fviz_silhouette(factor(sil_sing[,1]))
fviz_silhouette(sil_sing[,1])
fviz_silhouette(sil_sing)
fviz_silhouette(sil_sing)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6)
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
fviz_silhouette(sil_comp)
grid.arrange(q1, q2, q3, q4, ncol=2)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(sil_comp[,1]))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
fviz_silhouette(sil_comp)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(sil_ward[,1]))) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(sil_ward[,1]))) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(sil_ward[,1]))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(sil_ward[,1]))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
fviz_silhouette(sil_ward)
km(4)
set.seed(123)
clust_kmeans = kmeans(crab5, 4)
clust_kmeans = kmeans(crab5, 4)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(clust_kmeans$cluster))) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(clust_kmeans$cluster))) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(clust_kmeans$cluster))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(clust_kmeans$cluster))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
grid.arrange(q1, q2, q3, q4, ncol=2)
fviz_silhouette(clust_kmeans$cluster)
fviz_silhouette(clust_kmeans$cluster)
fviz_silhouette(clust_kmeans)
fviz_silhouette(clust_kmeans$cluster)
fviz_silhouette(factor(clust_kmeans$cluster))
fviz_silhouette(clust_kmeans$cluster,dis)
fviz_silhouette(factor(clust_kmeans$cluster),dis)
fviz_silhouette(clust_kmeans$cluster)
fviz_silhouette(silhouette(clust_kmeans$cluster,dis))
mmsil = silhouette(crab.clust$classification, dis)
fviz_silhouette(mmsil) #not a partition
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(crab.clust$classification))) + geom_point(alpha=0.6)
grid.arrange(q1, q2, q3, q4, ncol=2)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(crab.clust$classification))) + geom_point(alpha=0.6)
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(crab.clust$classification))) + geom_point(alpha=0.6) #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(crab.clust$classification))) + geom_point(alpha=0.6) #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(crab.clust$classification))) + geom_point(alpha=0.6) #carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
q1 = ggplot(mds, aes(x=V2, y=V1, col = factor(crab.clust$classification))) + geom_point(alpha=0.6)+ labs(col='cluster')
q2 = ggplot(crab5, aes(x=FL, y=RW, col = factor(crab.clust$classification))) + geom_point(alpha=0.6)+ labs(col='cluster') #frontal lobe size x rear width
q3 = ggplot(crab5, aes(x=CL, y=CW, col = factor(crab.clust$classification))) + geom_point(alpha=0.6)+ labs(col='cluster') #carapace length x width
q4 = ggplot(crab5, aes(x=CW, y=BD, col = factor(crab.clust$classification))) + geom_point(alpha=0.6) + labs(col='cluster')#carapace width x body depth
grid.arrange(q1, q2, q3, q4, ncol=2)
grid.arrange(q1, q2, q3, q4, ncol=2)
mmsil = silhouette(crab.clust$classification, dis)
library(tidytext)
library(dplyr)
library(ggplot2)
library(mice)
dat = read.csv('./klspirits.csv')
#Price to numeric, note that NAs represent "Price Hidden"- scraper could be changed to capture
dat$Price = gsub(' ','',dat$Price)
dat$Price = gsub('\\$','',dat$Price)
dat$Price = as.numeric(dat$Price)
dat$Desc = tolower(dat$Desc) #everything in Desc to lowercase
dat$Desc = gsub('[-]',' ',dat$Desc) #hyphen to space
dat$Desc = gsub('\'s','',dat$Desc) #apostrophe-s to null: turns ownership adjectives to proper nouns
dat$Desc = gsub('[^a-z ]','',dat$Desc) #nonletters/spaces to null
#straight-ahead sentiment analysis is likely appropriate for this kind of data: wineseller descriptions are unlikely to be sarcastic.
#Possible hiccups: praise with harsh terms, like Riesling with petrol notes/'fiery' liquors.
#AFINN sentiments used as they have numerical scores.  Adjust for longer reviews?
score_sentiment = function(str){
df = data.frame(strsplit(str,'\\s+'), stringsAsFactors = F)
colnames(df) = 'word'
return(sum(inner_join(df, get_sentiments('afinn'))$score))
}
dat$sent = sapply(dat$Desc,score_sentiment)
dat$Desc[which.min(dat$sent)] #clearly sentiment analysis is imperfect: this is a good review
ggplot(dat, aes(x=Type, y=Price)) + geom_boxplot() #price by type
ggplot(dat, aes(x=sent, y=Price)) + geom_point() + geom_smooth(method='lm', se=F) #price by sentiment
ggplot(dat, aes(x=sent, y=Price, col=Type)) + geom_point() + geom_smooth(method = 'lm', se=F) #price by type and sentiment
#regression looks inappropriate
anova(lm(data = dat, Price ~ Type)) #ANOVA by type
TukeyHSD(aov(data = dat, Price ~ Type)) #Cognac and Armagnac
type_sentiment = function(str){ #uses NRC instead, gives typed sentiment
df = data.frame(strsplit(str,'\\s+'), stringsAsFactors = F, 1)
colnames(df) = c('word', 'co')
preout = left_join(get_sentiments('nrc'), df) %>%
group_by(sentiment) %>%
summarize(tot = sum(co, na.rm=T)) %>%
t()
out = t(data.frame(preout[-1,]))
colnames(out) = preout[1,]
return(out)
}
setwd('/Users/askopelevich/Documents/GitHub/drinks-list')
dat = read.csv('./klspirits.csv')
#Price to numeric, note that NAs represent "Price Hidden"- scraper could be changed to capture
dat$Price = gsub(' ','',dat$Price)
dat$Price = gsub('\\$','',dat$Price)
dat$Price = as.numeric(dat$Price)
dat$Desc = tolower(dat$Desc) #everything in Desc to lowercase
dat$Desc = gsub('[-]',' ',dat$Desc) #hyphen to space
dat$Desc = gsub('\'s','',dat$Desc) #apostrophe-s to null: turns ownership adjectives to proper nouns
dat$Desc = gsub('[^a-z ]','',dat$Desc) #nonletters/spaces to null
#straight-ahead sentiment analysis is likely appropriate for this kind of data: wineseller descriptions are unlikely to be sarcastic.
#Possible hiccups: praise with harsh terms, like Riesling with petrol notes/'fiery' liquors.
#AFINN sentiments used as they have numerical scores.  Adjust for longer reviews?
score_sentiment = function(str){
df = data.frame(strsplit(str,'\\s+'), stringsAsFactors = F)
colnames(df) = 'word'
return(sum(inner_join(df, get_sentiments('afinn'))$score))
}
dat$sent = sapply(dat$Desc,score_sentiment)
dat$Desc[which.min(dat$sent)] #clearly sentiment analysis is imperfect: this is a good review
ggplot(dat, aes(x=Type, y=Price)) + geom_boxplot() #price by type
ggplot(dat, aes(x=sent, y=Price)) + geom_point() + geom_smooth(method='lm', se=F) #price by sentiment
ggplot(dat, aes(x=sent, y=Price, col=Type)) + geom_point() + geom_smooth(method = 'lm', se=F) #price by type and sentiment
#regression looks inappropriate
anova(lm(data = dat, Price ~ Type)) #ANOVA by type
TukeyHSD(aov(data = dat, Price ~ Type)) #Cognac and Armagnac
type_sentiment = function(str){ #uses NRC instead, gives typed sentiment
df = data.frame(strsplit(str,'\\s+'), stringsAsFactors = F, 1)
colnames(df) = c('word', 'co')
preout = left_join(get_sentiments('nrc'), df) %>%
group_by(sentiment) %>%
summarize(tot = sum(co, na.rm=T)) %>%
t()
out = t(data.frame(preout[-1,]))
colnames(out) = preout[1,]
return(out)
}
test = sapply(dat$Desc,type_sentiment)
test
head(test)
summary(test)
dim(test)
test[,-1]
test[-1,]
dim(test)
test[,1]
test[,2]
test[,3]
test[,4]
type_sentiment(dat$Desc[1])
test = lapply(dat$Desc,type_sentiment)
dim(test)
head(test)
unlist(test)
data.frame(test)
head(test)
tail(test)
rbind(test)
cbind(test)
matrix(unlist(test),ncol=10)
sents = data.frame(matrix(unlist(lapply(dat$Desc,type_sentiment)),ncol=10))
colnames(sents) = get_sentiments('nrc')[,1]
head(sents)
colnames(sents) = get_sentiments('nrc')[,2]
head(sents)
?unique
colnames(sents) = unique(get_sentiments('nrc')[,2])
head(sents)
unique(get_sentiments('nrc')[,2])
c(unique(get_sentiments('nrc')[,2]))
test = t(sapply(dat$Desc,type_sentiment))
head(test)
dim(test)
colnames(test)
data.frame(test)
?mapply
sents = data.frame(t(sapply(dat$Desc,type_sentiment)))
sort(unique(get_sentiments('nrc')[,2]))
unique(get_sentiments('nrc')[,2])
sort(unique(get_sentiments('nrc')[,2]))
sort(c(unique(get_sentiments('nrc')[,2])))
c(unique(get_sentiments('nrc')[,2]))
unique(get_sentiments('nrc')[,2])$sentiment
get_sentiments('nrc')$sentiment
unique(get_sentiments('nrc')$sentiment)
sort(unique(get_sentiments('nrc')$sentiment))
colnames(sents) = sort(unique(get_sentiments('nrc')$sentiment))
head(sents)
type_sentiment(dat$Desc[1])
rbind(dat, sents)
cbind(dat, sents)
dat = cbind(dat, sents)
head(dat)
summary(lm(data=dat, Price ~.-2))
summary(lm(data=dat, Price ~.-sent))
head(dat)
summary(lm(data=dat, Price ~.-sent-Desc-Name))
plotdat = dat %>%
select(Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
melt(plotdat)
library(reshape2)
melt(plotdat)
plotdat = dat %>%
select(Name, Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
melt(plotdat, id.vars = c('Name'))
melt(plotdat, id.vars = c('Name', 'Price'))
melt(plotdat, id.vars = c('Name', 'Price', 'Type'))
plotdat = melt(plotdat, id.vars = c('Name', 'Price', 'Type'))
ggplot(plotdat, aes(x=value, y=Price, col=variable))
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point()
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point()
sents = data.frame(t(sapply(dat$Desc,type_sentiment)))
class(sents[,1])
sents[1,1]
as.numeric(sents[1,1])
as.numeric(as.character(sents[1,1]))
sents = as.numeric(as.character(sents))
sents
sents = data.frame(t(sapply(dat$Desc,type_sentiment)))
as.numeric(as.character(sents))
as.character(sents)
apply(sents, 2,function(x){as.numeric(as.character(x))})
sents = apply(sents, 2,function(x){as.numeric(as.character(x))})
colnames(sents) = sort(unique(get_sentiments('nrc')$sentiment))
dat = cbind(dat, sents)
plotdat = dat %>%
select(Name, Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
plotdat = melt(plotdat, id.vars = c('Name', 'Price', 'Type'))
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point()
plotdat
head(dat)
plotdat = dat %>%
select(Name, Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
head(plotdat)
plotdat =
dat %>%
select(Name, Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
head(dat)
dat = read.csv('./klspirits.csv')
dat$Price = gsub(' ','',dat$Price)
dat$Price = gsub('\\$','',dat$Price)
dat$Price = as.numeric(dat$Price)
dat$Desc = tolower(dat$Desc) #everything in Desc to lowercase
dat$Desc = gsub('[-]',' ',dat$Desc) #hyphen to space
dat$Desc = gsub('\'s','',dat$Desc) #apostrophe-s to null: turns ownership adjectives to proper nouns
dat$Desc = gsub('[^a-z ]','',dat$Desc) #nonletters/spaces to null
dat = cbind(dat, sents)
plotdat = dat %>%
select(Name, Price, Type, anger, anticipation, disgust, fear, joy, negative, positive, sadness, surprise, trust)
plotdat = melt(plotdat, id.vars = c('Name', 'Price', 'Type'))
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point()
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point() + geom_smooth(method = 'lm', sd=F)
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_point() + geom_smooth(method = 'lm', se=F)
ggplot(plotdat, aes(x=value, y=Price, col=variable)) + geom_jitter() + geom_smooth(method = 'lm', se=F)
head(dat)
summary(dat)
sapply(colnames(sents), function(x){dat$Desc[which.max(dat[[x]])]})
